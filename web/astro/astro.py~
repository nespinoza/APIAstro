import os
import batman
import json
import string
import numpy as np
from flask import Flask, render_template, request, redirect, url_for
from werkzeug import secure_filename


APP_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_STATIC = os.path.join(APP_ROOT, 'static')
APP_UPLOAD = os.path.join(APP_ROOT, 'upload')
ALLOWED_EXTENSIONS = set(['txt', 'scv', 'dat', 'TXT', 'SCV'])
ESTELAR = pow(10,30)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = APP_UPLOAD

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS


@app.route('/', methods=['GET', 'POST'])
def index():

    global content
    if request.method == 'POST':

        x_values = list()
        y_values = list()
        allRows = list()
        flujo = list()
        time = list()


        file = request.files['file']
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            with open(os.path.join(app.config['UPLOAD_FOLDER'], filename)) as f:
                allRows = f.readlines()

        for line in allRows:
            line = line.strip()
            columns = line.split()
            x_values.append(float(columns[0]))
            y_values.append(float(columns[1]))



        #for row in allRows:
        #    row_array = string.split(row, ' ')
        #    x_values.append(float(row_array[0]))
        #    y_values.append(float(row_array[1]))



        radio_planeta =     float(request.form['radio_planeta'])
        radio_estrella =     float(request.form['radio_estrella'])
        distancia_orbital =       float(request.form['distancia_orbital'])
        inclinacion_orbital =      float(request.form['inclinacion_orbital'])

        #transformando numeros de los que recibe batman
        rp = (radio_planeta*6400)/(radio_estrella*700000)
        i = inclinacion_orbital
        a = (distancia_orbital*150000000)/(radio_estrella*700000)

        if radio_planeta == '':
           radio_planeta = 0.1

        if inclinacion_orbital == '':
            inclinacion_orbital = 87.

        if distancia_orbital == '':
            distancia_orbital = 15.

        medio = x_values[int(len(x_values)/2)]

        params = batman.TransitParams()
        params.t0 = medio
        params.per = 1.
        params.rp = rp
        params.a = 15.
        params.inc = inclinacion_orbital
        params.ecc = 0.
        params.w = 90.
        params.u = [0.1, 0.3]
        params.limb_dark = "quadratic"

        #t = np.linspace(-0.05, 0.05, 100)
        #m = batman.TransitModel(params, t)

        m = batman.TransitModel(params, np.array(x_values))
        flux = m.light_curve(params)

        x = np.array(x_values)
        y = np.array(y_values)
        flu = np.array(flux)
        res = flu-y
        res = res.tolist()
        flux = flux.tolist()

        str_x_json = json.dumps(x_values)
        str_y_json = json.dumps(flux)
        str_y_file_json = json.dumps(y_values)
        str_res_json = json.dumps(res)

        #produciendo formato plot de flujo batman
        indx = 0
        fbat_t = list()
        for row in x_values:
            fbat_t.append([row, flux[indx]])
            indx = indx+1
        str_fbat_t_json = json.dumps(fbat_t)

        #produciendo formato plot de flujo real
        indx = 0
        f_t = list()
        for row in x_values:
            f_t.append([row, y_values[indx]])
            indx = indx+1
        str_f_t_json = json.dumps(f_t)


        #Res = np.array(flux)-np.array(y_values)
        Residuo = list()
        j=0
        for i in x_values:
            val = abs(float(res[j]))
            Residuo.append([ i , val ])
            j=j+1
        str_Res_json = json.dumps(Residuo)
        #str_Res_json = [[1,2],[1,3],[1,4],[5,6],[6,7]]
        return render_template('index.html', form=request.form, x_json=str_x_json, y_json=str_y_json, y_file=str_y_file_json, fbat_t_json=str_fbat_t_json,f_t_json=str_f_t_json, Res_jason = str_Res_json,  )





    return render_template('index.html', form=[] )




if __name__ == '__main__':
    app.run(debug=True)
